# .github/workflows/deploy-backend.yml
name: Deploy Backend to AWS ECS

on:
  push:
    branches: [ main ]
    paths: 
      - 'src/agent.ts'
      - 'src/firebase.ts'
      - 'src/requestEnum.ts'
      - 'requestEnum.ts'
      - 'package.json'
      - 'tsconfig.json'
      - 'Dockerfile'
      - '.github/workflows/deploy-backend.yml'

env:
  AWS_REGION: ap-south-1
  PROJECT_NAME: livekit-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image for Node.js LiveKit Agent
        docker build -t $ECR_REGISTRY/livekit-backend:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/livekit-backend:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/livekit-backend:$IMAGE_TAG
        docker push $ECR_REGISTRY/livekit-backend:latest

    - name: Update ECS service
      run: |
        # Force new deployment
        aws ecs update-service \
          --cluster ${{ env.PROJECT_NAME }}-cluster \
          --service ${{ env.PROJECT_NAME }}-backend-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster ${{ env.PROJECT_NAME }}-cluster \
          --services ${{ env.PROJECT_NAME }}-backend-service \
          --region ${{ env.AWS_REGION }}

    - name: Deployment status
      run: |
        echo "Backend deployment completed successfully!"
        echo "Check your LiveKit Agent at your ALB DNS name"
