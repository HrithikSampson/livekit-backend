# .github/workflows/deploy-backend.yml
name: Deploy Backend to AWS ECS

on:
  push:
    branches: [ main ]
    paths: 
      - 'src/**'
      - 'Dockerfile'
      - 'package.json'
      - '.github/workflows/deploy-backend.yml'

env:
  AWS_REGION: ap-south-1
  PROJECT_NAME: livekit-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names livekit-backend --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name livekit-backend --region ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: livekit-backend
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Create ECS infrastructure if needed
      run: |
        # Create ECS cluster if it doesn't exist
        aws ecs describe-clusters --clusters ${{ env.PROJECT_NAME }}-cluster --region ${{ env.AWS_REGION }} || \
        aws ecs create-cluster --cluster-name ${{ env.PROJECT_NAME }}-cluster --region ${{ env.AWS_REGION }}
        
        # Create CloudWatch log group if it doesn't exist
        aws logs describe-log-groups --log-group-name-prefix "/ecs/${{ env.PROJECT_NAME }}-backend" --region ${{ env.AWS_REGION }} || \
        aws logs create-log-group --log-group-name "/ecs/${{ env.PROJECT_NAME }}-backend" --region ${{ env.AWS_REGION }}

    - name: Create or update ECS task definition
      id: task-def
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Check if task definition exists
        if aws ecs describe-task-definition --task-definition ${{ env.PROJECT_NAME }}-backend-task --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "Task definition exists, updating..."
          # Get the current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition ${{ env.PROJECT_NAME }}-backend-task \
            --region ${{ env.AWS_REGION }} \
            --query 'taskDefinition')
          
          # Update the image URI in the task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/livekit-backend:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE')
          
          # Remove fields that shouldn't be in the new task definition
          NEW_TASK_DEFINITION=$(echo $NEW_TASK_DEFINITION | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')
          
          # Save the new task definition
          echo "$NEW_TASK_DEFINITION" > new-task-definition.json
        else
          echo "Task definition doesn't exist, creating from template..."
          # Use the template task definition and update the image
          cp ecs-task-definition.json new-task-definition.json
          # Update the image in the template
          jq --arg IMAGE "$ECR_REGISTRY/livekit-backend:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE' ecs-task-definition.json > new-task-definition.json
        fi
        
        # Register the new task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-definition.json \
          --region ${{ env.AWS_REGION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update ECS service (if exists)
      run: |
        # Check if service exists
        if aws ecs describe-services --cluster ${{ env.PROJECT_NAME }}-cluster --services ${{ env.PROJECT_NAME }}-backend-service --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "Service exists, updating..."
          aws ecs update-service \
            --cluster ${{ env.PROJECT_NAME }}-cluster \
            --service ${{ env.PROJECT_NAME }}-backend-service \
            --task-definition ${{ steps.task-def.outputs.NEW_TASK_DEF_ARN }} \
            --region ${{ env.AWS_REGION }}
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster ${{ env.PROJECT_NAME }}-cluster \
            --services ${{ env.PROJECT_NAME }}-backend-service \
            --region ${{ env.AWS_REGION }}
        else
          echo "ECS service doesn't exist. You need to create it manually or use the setup script."
          echo "Run: ./setup-ecs-infrastructure.sh"
        fi

    - name: Deployment status
      run: |
        echo "Backend deployment completed successfully!"
        echo "Check your LiveKit Agent at your ALB DNS name"
